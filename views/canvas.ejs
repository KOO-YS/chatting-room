
<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/konva@7.0.7/konva.min.js"></script>
    <meta charset="utf-8" />
    <title>Konva Drag and Drop the Stage Demo</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
    </style>
  </head>
  <body>
    <div id="container"></div>
    <script>
      var width = window.innerWidth;
      var height = window.innerHeight;

      var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height,
        // draggable: true,
      });

      var layer = new Konva.Layer();

      var circle = new Konva.Circle({
        x: stage.width() / 2,
        y: stage.height() / 2,
        radius: 70,
        fill: 'red',
        stroke: 'black',
        strokeWidth: 4,
        draggable: true,
        name : 'rect'
      });

      // add the shape to the layer
      layer.add(circle);
      
      var layer2 = new Konva.Layer();

      var rect1 = new Konva.Rect({
        x: 20,
        y: 20,
        width: 100,
        height: 50,
        fill: 'green',
        stroke: 'black',
        strokeWidth: 4,
        draggable: true,
        name : 'rect'
      });
      // add the shape to the layer

      var rect2 = new Konva.Rect({
        x: 150,
        y: 40,
        width: 100,
        height: 50,
        fill: 'red',
        shadowBlur: 10,
        cornerRadius: 10,
        draggable: true,
        name : 'rect'
      });

      // add the shape to the layer
      layer2.add(rect1);
      layer2.add(rect2);


      // add the layer to the stage
      stage.add(layer);
      stage.add(layer2);

      function updateLocation(e) {
        console.log('Position: x = ' + e.target.x() + '   y = ' + e.target.y());
        // layer.batchDraw();
      }

      // rect1.on('dragmove', updateText);
      // rect2.on('dragmove', updateText);

      circle.on('dragend', updateLocation);
      rect1.on('dragend', updateLocation);
      rect2.on('dragend', updateLocation);

      var transform = new Konva.Transformer();
      layer2.add(transform);

      transform.nodes([rect1, rect2]);
      layer2.draw();


      // add a new feature, lets add ability to draw selection rectangle
      var selectionRectangle = new Konva.Rect({
        fill: 'rgba(0,0,255,0.5)',
      });
      layer2.add(selectionRectangle);

      var x1, y1, x2, y2;
      stage.on('mousedown touchstart', (e) => {
        // do nothing if we mousedown on eny shape
        if (e.target !== stage) {
          return;
        }
        x1 = stage.getPointerPosition().x;
        y1 = stage.getPointerPosition().y;
        x2 = stage.getPointerPosition().x;
        y2 = stage.getPointerPosition().y;
        
        selectionRectangle.visible(true);
        selectionRectangle.width(0);
        selectionRectangle.height(0);
        layer2.draw();
      });

      stage.on('mousemove touchmove', () => {
          // no nothing if we didn't start selection
          if (!selectionRectangle.visible()) {
              return;
          }
          x2 = stage.getPointerPosition().x;
          y2 = stage.getPointerPosition().y;
          
          selectionRectangle.setAttrs({
              x: Math.min(x1, x2),
              y: Math.min(y1, y2),
              width: Math.abs(x2 - x1),
              height: Math.abs(y2 - y1),
          });
          layer2.batchDraw();
      });
      stage.on('dragstart', (e) =>{
        console.log('drag start');
        
        transform.nodes([e.target]);
        layer.batchDraw();
        layer2.batchDraw();
      });
      stage.on('mouseup touchend', () => {
            // no nothing if we didn't start selection
            if (!selectionRectangle.visible()) {
                return;
              }
              
              // update visibility in timeout, so we can check it in click event
              setTimeout(() => {
                selectionRectangle.visible(false);
                layer2.batchDraw();
              });
              
              var shapes = stage.find('.rect').toArray();
              var box = selectionRectangle.getClientRect();
              var selected = shapes.filter((shape) =>
              Konva.Util.haveIntersection(box, shape.getClientRect())
              );
              transform.nodes(selected);
              layer2.batchDraw();
            });
            
            stage.on('click tap', function (e) {
              // if we are selecting with rect, do nothing
        if (selectionRectangle.visible()) {
          return;
        }

        // if click on empty area - remove all selections
        if (e.target === stage) {
          transform.nodes([]);
          layer2.draw();
          return;
        }

        // do nothing if clicked NOT on our rectangles
        if (!e.target.hasName('rect')) {
          return;
        }

        // if(e.target)
        // do we pressed shift or ctrl?
        const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;
        const isSelected = transform.nodes().indexOf(e.target) >= 0;

        if (!metaPressed && !isSelected) {
          // if no key pressed and the node is not selected
          // select just one
          transform.nodes([e.target]);
        } else if (metaPressed && isSelected) {
          // if we pressed keys and node was selected
          // we need to remove it from selection:
          const nodes = transform.nodes().slice(); // use slice to have new copy of array
          // remove node from array
          nodes.splice(nodes.indexOf(e.target), 1);
          transform.nodes(nodes);
        } else if (metaPressed && !isSelected) {
          // add the node into selection
          const nodes = transform.nodes().concat([e.target]);
          transform.nodes(nodes);
        }
        layer2.draw();
      });
    </script>
  </body>
</html>

<!-- https://konvajs.org/docs/drag_and_drop/Drag_and_Drop.html -->
<!-- https://konvajs.org/docs/select_and_transform/Basic_demo.html -->